Ce este o structura repetitiva.

- Structurile repetitive execută o instrucțiune de mai multe ori. Se mai numesc și bucle sau cicluri.

- Structurile repetitive pot fi:

    - cu număr cunoscut de pași (iterații) – se cunoaște de la început de câte ori se va execută instrucțiunea

    - cu număr necunoscut de pași (iterații). Instrucțiunea se execută cât timp o condiție este adevărată. La fiecare pas se va evalua condiția, iar dacă aceasta este adevărată se va executa instrucțiunea.

- Structurile repetitive cu număr necunoscut de pași pot fi:

    - cu test inițial: mai întâi se evaluează condiția; dacă este adevărată se execută instrucțiunea și procesul se reia.

    - cu test final: mai întâi se execută instrucțiunea, apoi se evaluează condiția; Dacă este adevărată, procesul se reia.



In ce forma normala este baza de date folosita la proiect? (Evident, daca ai o astfel de baza.) Si

de ce este in acea forma normala?

SAU

Ce este normalizarea?

- Normalizarea este procesul de organizare eficientă a datelor într-o bază de date. Există două scopuri ale procesului de normalizare: eliminarea datelor redundante (de exemplu, stocarea acelorași date în mai mult de un tabel) și asigurarea sensibilității datelor (doar stocarea datelor într-un tabel). Ambele sunt obiective valoroase deoarece diminuează spațiul pe care o consumă o bază de date și se asigură că datele sunt stocate în mod logic.



Ce sunt secventele?

- Secvențele în programare sunt structuri de date ordonate care conțin o colecție de elemente, precum listele, tuplurile sau șirurile de caractere. Ele permit accesarea și manipularea elementelor într-o ordine specifică.



Ce sunt restrictiile de integritate? Care sunt acelea?

- Restrictiile de integritate ale modelului relational reprezinta cerinte pe care trebuie sa le îndeplineasca datele din cadrul bazei de date pentru a putea fi considerate corecte si coerente în raport cu lumea reala pe care o reflecta. Daca o baza de date nu respecta aceste cerinte, ea nu poate fi utilizata cu un maxim de eficienta.

- Restrictiile sunt de doua tipuri:

    - restrictii de integritate structurale, care se definesc prin egalitatea sau inegalitatea unor valori din cadrul relatiilor:

        - restrictia de unicitate a cheilor;

        - restrictia entitatii;

        - dependentele între ele;

    - restrictii de integritate de comportament care tin cont de semnificatia valorilor din cadrul bazei de date.



Care este diferenta dintre case si decode?

- Diferența principală dintre CASE și DECODE în SQL este că CASE este o instrucțiune condițională standard SQL, oferind flexibilitate în evaluarea expresiilor complexe, în timp ce DECODE este o funcție specifică Oracle, folosită pentru mapări simple de valori, similară funcției IF-THEN-ELSE. CASE este mai versatil și portabil între diferite SGBD-uri, pe când DECODE este limitată la Oracle.



Care sunt modificatorii de acces in C++?

- Pentru a permite ascunderea anumitor membri ai unei clase, limbajele orientate pe obiecte oferă conceptul de modificatori de acces. În C++ există trei modificatori de acces, din care doi sunt prezentați mai jos:

    - public - membrii declarați publici sunt vizibili și accesibili din orice alt obiect de orice tip;

    - private - membrii declarați privați nu sunt accesibili decât din obiecte de același tip cu obiectul respectiv.

    - protected - membrii declarați protejați nu sunt accesibili decât din obiecte de același tip cu obiectul respectiv sau obiecte de tip clase derivate din clasa respectivă (pentru derivat, vedeți paragraful moștenire).



Ce este un pointer?

SAU

De ce folosim pointeri?

- Pointerii pot sa pastreze adrese de memorie ale altor variabile (care la randul lor sa contina alte valori). Un pointer este asociat intotdeauna unui tip de variabila (int, char, bool, s.a.m.d.). Pointerul indica defapt o zona din memoria calculatorului.

- Utilizăm pointeri pentru a accesa și manipula direct locațiile de memorie, ceea ce permite gestionarea eficientă a resurselor și facilitarea structurii dinamice a datelor.



Ce este o functie virtuala ?

O funcție virtuală este o metodă într-o clasă de bază care poate fi suprascrisă de clasele derivate, permițând apeluri specifice la metodele acelor clase derivate prin intermediul unui pointer sau referință la clasa de bază.



Care sunt diferentele dintre C si C++?

- Limbajul C are o abordare procedurală, cu funcții pentru toate aspectele, pe când C++ a devenit mai permisiv. Astfel că limbajul C ne oferă această strictețe, de care noi avem nevoie pentru a învăța despre precizie în programare. Mai târziu, când elevii au trecut la alt nivel și învață cum să folosească tehnologiile mai avansate, trecerea la C++ sau alt limbaj orientat pe obiect, va fi naturală.



Ce trasaturi are o baza de date in FN4?

- O schema de relatie R este in forma normala 4 daca orice dependenta multivalorica netriviala X →→ Y are in partea stanga o superchei

- Aceasta forma care considera si dependentele multivalorice se numeste forma normala 4 (FN4).

- Definitia ei este similara cu cea pentru FNBC dar conditia se pune pentru dependentele multivalorice ale relatiei respective



Ce este o tranzitie?

- Prin tranzitie se intelege un set de operatii de actualizare a continutului bazei de date, conectate logic printr-o regula de integritate, care ori se executa toate ori sunt anulate toate astfel incat in final baza de date se va afla intr-o stare stabila indiferent ce evinimente apar pe durata executarii acestor operatii.



Cate tipuri de normalizari exista?

•	Prima Formă Normală (1NF): Elimină duplicarea grupurilor de date și asigură că fiecare celulă a tabelului conține o singură valoare atomică.

•	A Doua Formă Normală (2NF): Asigură 1NF și elimină dependențele parțiale, adică toate coloanele ne-cheie sunt complet dependente de cheia primară.

•	A Treia Formă Normală (3NF): Asigură 2NF și elimină dependențele tranzitive, adică coloanele ne-cheie nu depind de alte coloane ne-cheie.

•	Forma Boyce-Codd (BCNF): Asigură 3NF și rezolvă anomalii suplimentare eliminând dependențele funcționale anormale.

•	A Patra Formă Normală (4NF): Asigură BCNF și elimină dependențele multivaluate, asigurând că un tabel nu conține mai mult de o relație unul-la-mulți între atribute.

•	

Ce este SQL? Este SQL un limbaj procedural sau nu?

- SQL este un limbaj de interogare structurat - este un limbaj de programare specific pentru manipularea datelor în sistemele de manipulare a bazelor de date relaționale (RDBMS), iar la origine este un limbaj bazat pe algebra relațională. Acesta are ca scop inserarea datelor, interogații, actualizare și ștergere, modificarea și crearea schemelor, precum și controlul accesului la date. A devenit un standard în domeniu, fiind cel mai popular limbaj utilizat pentru crearea, modificarea, regăsirea și manipularea datelor de către SGBD-urile (Sistemele de Gestiune a Bazelor de Date) relaționale. Pe lângă versiunile standardizate ale limbajului, există o mulțime de dialecte și variante, unele proprietare, fiind specifice anumitor SGBD-uri și de asemenea conținând extensii pentru a suporta SBD-urile (Sistemele de Baze de Date) obiectuale (obiectual-relaționale).

- SQL permite atât accesul la conținutul bazelor de date, cât și la structura acestora.



Ce este un limbaj procedural?

- Un limbaj procedural este un tip de limbaj de programare computerizat care specifică o serie de pași și proceduri bine structurate în contextul său de programare pentru a compune un program. Conține o ordine sistematică de declarații, funcții și comenzi pentru a finaliza o sarcină sau un program de calcul. Limbajul procedural este cunoscut și ca limbaj imperativ.

Exemple : C, Pascal, Fortran



Ce este o baza de date no-sql?

- Termenul de „NoSQL” se referă la bazele de date nerelaționale, care stochează datele într-un format diferit de tabelele relaționale. Totuși, bazele de date NoSQL pot fi interogate cu ajutorul API-urilor pentru limbaj idiomatic, limbaje de interogare structurate declarativ sau limbaje de interogare după exemplu, fapt pentru care se numesc și baze de date „nu doar SQL”.

- Bazele de date NoSQL sunt utilizate foarte mult pentru aplicații web în timp real și big data, deoarece avantajul lor principal este faptul că oferă o mare scalabilitate și disponibilitate.



Care este diferenta dintre o clasa si un obiect?

- Clasa este o tehnică folosită pentru a lega împreună datele și funcțiile asociate împreună, în contrast, Object este instanța creată a unei clase. Obiectul și clasa sunt termenii utilizați în principal în programarea orientată obiect prin care datele sunt organizate sub formă de obiecte pentru a reduce complexitatea codului și aplicației.

- Obiectele își schimbă starea prin metodele expuse și comunică cu aceste metode. Dimpotrivă, clasele sunt pasive și nu transmit mesaje, ci se folosesc pentru a crea obiecte. O clasă este, de asemenea, cunoscută ca o colecție de tipuri de obiecte asemănătoare. Diferența substanțială dintre obiect și clasă este de asemenea prezentată mai jos în tabelul de comparație.



Cati octeti ocupa stocarea cuvantului “test”?

-	5 oceteti, unul pt fiecare caracter si unul pt caracterul nul de la final

Pe o arhitectură de 32 de biți:

•	1 octet (8 biți):

o	char

o	unsigned char

o	int8_t (tip întreg cu semn de 8 biți)

o	uint8_t (tip întreg fără semn de 8 biți)

•	2 octeți (16 biți):

o	short

o	unsigned short

o	int16_t (tip întreg cu semn de 16 biți)

o	uint16_t (tip întreg fără semn de 16 biți)

•	4 octeți (32 biți):

o	int

o	unsigned int

o	float

o	int32_t (tip întreg cu semn de 32 biți)

o	uint32_t (tip întreg fără semn de 32 biți)

o	int* (pointer la int)

o	char* (pointer la char)

•	8 octeți (64 biți):

o	double

o	int64_t (tip întreg cu semn de 64 biți)

o	uint64_t (tip întreg fără semn de 64 biți)

o	long long

o	unsigned long long

Pe o arhitectură de 64 de biți:

•	1 octet (8 biți):

o	char

o	unsigned char

o	int8_t

o	uint8_t

•	2 octeți (16 biți):

o	short

o	unsigned short

o	int16_t

o	uint16_t

•	4 octeți (32 biți):

o	int

o	unsigned int

o	float

o	int32_t

o	uint32_t

•	8 octeți (64 biți):

o	double

o	long

o	unsigned long

o	int64_t

o	uint64_t

o	long long

o	unsigned long long

o	int* (pointer la int)

o	char* (pointer la char)



Enumara limbajele SQL (lMD, lDD, etc)

Limbajul SQL (Structured Query Language) are mai multe sub-limbaje sau categorii de comenzi, fiecare cu un set specific de operații. Iată principalele sub-limbaje SQL:

1.	DML (Data Manipulation Language):

o	SELECT: Selectează date dintr-o bază de date.

o	INSERT: Inserează date într-un tabel.

o	UPDATE: Actualizează date existente într-un tabel.

o	DELETE: Șterge date dintr-un tabel.

2.	DDL (Data Definition Language):

o	CREATE: Creează obiecte de bază de date, cum ar fi tabele, vizualizări, și proceduri.

o	ALTER: Modifică structura obiectelor existente în baza de date.

o	DROP: Șterge obiecte de bază de date.

o	TRUNCATE: Șterge toate datele dintr-un tabel, dar păstrează structura tabelului.

3.	DCL (Data Control Language):

o	GRANT: Acordă permisiuni utilizatorilor asupra obiectelor de bază de date.

o	REVOKE: Retrage permisiuni acordate anterior.

4.	TCL (Transaction Control Language):

o	COMMIT: Confirmă o tranzacție în baza de date.

o	ROLLBACK: Revocă o tranzacție nereușită sau în desfășurare.

o	SAVEPOINT: Creează un punct de salvare în cadrul unei tranzacții pentru a putea reveni la acesta mai târziu.

Fiecare dintre aceste sub-limbaje servește unui scop specific în gestionarea și manipularea datelor din bazele de date relaționale.



Ce este encapsularea?

- In object-oriented programming, encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. 

- Encapsularea este posiblitatea de a seta nivele de acces datelor(variabilelor si metodelor). Pe cele mai importante 3 le vei recunoaste dupa cuvintele cheie public, private si protected. Le gasesti sub aceeasi denumire in diverse limbaje de programare OOP. Acestia sunt modificatorii de acces.



Care sunt functiile unui SGBD?

- Sistemul de gestiune al bazei de date reprezinta ansamblul de programe care  gestioneaza baza de date si care asigura realizarea urmatoarelor operatii:

    - definirea structurii bazei de date;

    - incarcarea datelor in baza de date;

    - accesul la date (integrare, actualizare);

    - intretinerea bazelor de date (colectarea si refolosirea spatiilor goale, refacerea bazei de date in cazul unui accident);

    - reorganizarea bazei de date (restructurarea si modificarea strategiei de acces);

    - securitatea datelor si accesul la date;

    - integritatea datelor.

- Sistemul de gestiune al bazelor de date apare ca un sistem complex de programe, de aplicatie si limbaj propriu, care asigura interfata intre o baza de date si utilizatorii acestuia.







Ce sunt selectia si proiectia?

- Selectia. Roprezinta o operatie din AR definita asupra unei relatii R, operatie care consta din construierea unei relatii S, a carei schema este identica cu cea a relatiei R si a carei extensie este constituita din acele tupluri din R care satisfac o conditie mentionata explicit în cadrul operatiei. Întrucât cel mai adesea, nu toate tuplurile din R satisfac, aceasta conditie, selectia înseamna efectuarea unor taieturi orizontale asupra relatiei R, adica eliminarea de tupluri.

- Proiectia. Reprezinta o operatie din AR definita asupra unei relatii R, operatie care consta din construirea unei noi relatii P, în care se regasesc unele atribute din R, înseamna efectuarea unor taieturi verticale asupra lui R, care pot avea ca efect aparitia unor tupluri duplicate ce se cer a fi eliminate.



Ce este un struct in C?

- A struct in the C programming language is a composite data type declaration that defines a physically grouped list of variables under one name in a block of memory, allowing the different variables to be accessed via a single pointer or by the struct declared name which returns the same address.



Care este diferenta dintre COUNT si UPPER? (una e single row, alta este multiple row)



Care sunt instructiunile de grup din SQL

•  GROUP BY

•  Funcții de agregare:

•	COUNT

•	SUM

•	AVG

•	MAX

•	MIN

•  HAVING



Care este structura comenzii select?

- Select [Distinct] [* | lista_coloane] From tabela Where conditii Group By [coloana] Having conditie Order by [coloana|expresie] [ASC / DESC] [INTO Table]

- SELECT [predicat] { * | tabel.* | [tabel.]câmp1 [AS alias1] [, [tabel.]câmp2 [AS alias2] [, ...]]} FROM expresietabel [, ...] [IN bazădedateexternă] [WHERE... ] [GROUP BY... ] [HAVING... ] [ORDER BY... ] [WITH OWNERACCESS OPTION]



Da exemple de comenzi SQL

- SELECT este comanda cea mai utilizata ; este folosita pentru obtinerea datelor din bazele de date

- INSERT aceste trei comenzi sunt utilizate pentru a introduce noi

- UPDATE rinduri,pentru a schimba rindurile existente si stergerea

- DELETE rindurilor nedorite din tabelele bazelor de date respective. (Ele sunt cunoscute in ansamblu ca DML sau comenzi ale limbajului de manipulare a datelor.)

- CREATE aceste trei comenzi sunt utilizate dinamic pentru a crea ,

- ALTER utiliza si sterge orice structura de date,de exemplu,tabele,

- DROP expuneri ,indecsi.(Ele sunt cunoscute sub numele colectiv DDL sau comenzi ale limbajelor de definire a datelor).

- GRANT aceste doua comenzi sunt utilizate pentru a da sau a lua

- REVOKE drepturile de acces pentru bazele de date si structurile din Oracle.



Ce comenzi folosim pentru protectia datelor?

- SQLPLUS - Pentru protectia voastra ,parola nu va apare pe ecran. SQL*Plus va afisa promptul sau: SQL>



Ce sunt intersectia si diviziunea in SQL?

- Intersectia (intersection) a doua relatii compatibile R si S este o relatie T = R  ̇ S care contine toate tuplurile care apartin atât relatiei R cât si relatiei S. La fel ca si reuniunea, operatia de intersectie se exprima în SQL ca intersectie a doua tabele obtinute ca rezultat a doua instructiuni SELECT, cu sintaxa:

    - SELECT lista_atribute_1 FROM tabel_1 [WHERE conditie_1] INTERSECT

    - SELECT lista_atribute_2 FROM tabel_2 [WHERE conditie_2]

- Diviziunea. Fie doua multimi de atribute: A = {A1, A2, ....An} si B = {B1, B2, ...Bm} si doua relatii R (A  ̈ B) si S (B) astfel încât multimea atributelor relatiei S sa fie o submultime a multimii atributelor relatiei R. Relatia T obtinuta prin operatia de diviziune T(A) = R ‚ S are ca atribute toate atributele diferentei celor doua multimi de atribute (adica acele atribute care apartin relatiei R si nu apartin relatiei S) si contine acele tupluri t care au proprietatea ca pentru orice tuplu s din S exista un tuplu în R care are atributul B (simplu sau compus) egal cu atributul B al tuplului s: T(A) = R ‚ S = P A s R.B = S.B (R). În limbajul SQL, diviziunea se exprima printr-o instructiune SELECT, introducând explicit lista atributelor de proiectie si conditia de egalitate a atributelor corespondente din cele doua relatii prin clauza WHERE.



Ce sunt clasele derivate?

- Spunem ca clasa A este o clasa derivata din clasa B daca clasa A are "trasaturile" clasei B, eventual, si altele noi. Clasa B se mai numeste clasa de baza pentru A. O clasa derivata are toate functiile si variabilele membru ale clasei de baza, dar poate avea si functii membre suplimentare si/sau variabile membru suplimentare.

- Pentru a oferi clasei derivate acces la un membru al clasei de baza, acesta trebuie declarat protected sau public. Pentru respectarea principiului incapsularii datelor, datele membre pentru care se ofera acces claselor derivate se declara in clasa de baza cu atributul protected. De asemenea pentru a conserva dreptul de acces in urma derivarii, se utilizeaza modificatorul de acces public. Accesul poati fi stopat pe orice nivel al ierarhiei de clase printr-un modificator de acces private.



Ce este o tabela ? 

-	O tabel într-o bază de date este o structură organizată în rânduri și coloane, folosită pentru a stoca date într-un format sistematic. Fiecare rând reprezintă o înregistrare unică, iar fiecare coloană conține un tip specific de informație despre acea înregistrare.


